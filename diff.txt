diff --git a/.github/workflows/rust.yml b/.github/workflows/rust.yml
index f8efa9d..2509e29 100644
--- a/.github/workflows/rust.yml
+++ b/.github/workflows/rust.yml
@@ -1,28 +1,7 @@
 # Based on https://github.com/rust-bitcoin/bitcoin_hashes/blob/master/.github/workflows/rust.yml
-on:
-  push:
-    branches:
-      - master
-  pull_request:
-    branches:
-      - master
+on: [push, pull_request]
 name: Continuous integration
 jobs:
-  clippy_check:
-    runs-on: ubuntu-latest
-    steps:
-      - uses: actions/checkout@v3
-        with:
-          submodules: true
-      - uses: actions-rs/toolchain@v1
-        with:
-            toolchain: nightly
-            components: clippy
-            override: true
-      - uses: actions-rs/clippy-check@v1
-        with:
-          token: ${{ secrets.GITHUB_TOKEN }}
-          args: --all-features
   bench_nightly:
     name: Nightly - ASan + Bench
     runs-on: ubuntu-latest
@@ -50,12 +29,12 @@ jobs:
         run: ./contrib/test.sh

   wasm:
-    name: Nightly - Docs / WebAssembly Build + Tests
+    name: Stable - Docs / WebAssembly Build
     runs-on: ubuntu-latest
     strategy:
       matrix:
         rust:
-          - nightly
+          - stable
     steps:
       - name: Checkout Crate
         uses: actions/checkout@v2
@@ -64,7 +43,6 @@ jobs:
          with:
           profile: minimal
           toolchain: ${{ matrix.rust }}
-          target: wasm32-unknown-unknown
           override: true
       - name: Building docs
         env:
@@ -72,7 +50,7 @@ jobs:
         run: ./contrib/test.sh
       - name: Running WASM build
         env:
-          DO_SAPIO_WASM: true
+          DO_WASM: true
         run: ./contrib/test.sh

   Tests:
@@ -81,7 +59,7 @@ jobs:
      strategy:
       matrix:
         rust:
-          - 1.61.0
+          - 1.52.1
           - beta
           - stable
     steps:
@@ -93,8 +71,8 @@ jobs:
           profile: minimal
           toolchain: ${{ matrix.rust }}
           override: true
-      - name: Pin cc if rust 1.61.0
-        if: matrix.rust == '1.61.0'
+      - name: Pin cc if rust 1.52.1
+        if: matrix.rust == '1.52.1'
         run: cargo generate-lockfile
       - name: Running cargo
         env:
diff --git a/Cargo.toml b/Cargo.toml
index 3b85155..44e7c68 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -1,15 +1,3 @@
 [workspace]
-members = ["sapio"
-          , "sapio-contrib"
-          , "ctv_emulators"
-          , "sapio-base"
-          , "cli"
-          , "tools"
-          , "plugins"
-          , 'emulator-trait'
-          , 'examples/dcf_mining_pool'
-          , 'sapio-trait'
-          , 'sapio_macros'
-          , 'sapio-psbt'
-          , 'simp-pack']
+members = ["sapio", "sapio-ws", "sapio-front", "sapio-contrib", "ctv_emulators", "sapio-base", "cli", "tools", "plugins", 'emulator-trait', 'example$
 exclude = ["plugin-example", "integration_tests"]
diff --git a/README.md b/README.md
index 27067b5..8d7786c 100644
--- a/README.md
+++ b/README.md
@@ -18,6 +18,27 @@ The root crate is a workspace for various Sapio Components such as:
 1. [Sapio Front](sapio-front/): Protocols for interacting with a compilation session
 1. [Sapio Compiler Server](sapio-ws/): Binary for a websocket server running sapio-front

-## Getting Started
+## QuickStart:
-Please see the [Designing Bitcoin Contracts with Sapio](https://learn.sapio-lang.org) book to get going!
+Sapio should work on all platforms, but is recommend for use with Linux (Ubuntu preferred).
+Follow this quickstart guide to get going.
+
+1.  Get [rust](https://rustup.rs/) if you don't have it already.
+1.  Add the wasm target by running `rustup target add wasm32-unknown-unknown` in your terminal.
+1.  Get the [wasm-pack](https://rustwasm.github.io/wasm-pack/) tool.
+1.  Clone this repo: `git clone git@github.com:sapio-lang/sapio.git && cd sapio`
+1.  Build the plugin `cd plugin-example && wasm-pack build && cd ..`
+1.  Instantiate a contract from the plugin: `cargo run --bin sapio-cli -- contract create 9.99 "{\"participants\": [{\"amount\": 9.99, \"address\": $
+
+You can use `cargo run --bin sapio-cli -- help` to learn more about what a the CLI can do! and `cargo run --bin sapio-cli -- <subcommand> help` to l$
+
+As a second experiment, try modifying the contract in plugin-example to one
+of the contracts from sapio-contrib! Remember to recompile plugin-example
+with `wasm-pack build`!
+
+Still hungry for more? Implement your own smart contract idea -- you can use
+sapio-contrib for inspiration or as building blocks for something new!
+
+Stuck? Run `cargo doc --open --no-deps` to build and open the documentation
+locally, or just shoot me a note and I'll guide you through it! Any and all
+feedback welcome!
diff --git a/cli/Cargo.toml b/cli/Cargo.toml
index 40f5725..326027a 100644
--- a/cli/Cargo.toml
+++ b/cli/Cargo.toml
@@ -1,6 +1,6 @@
 [package]
 name = "sapio-cli"
-version = "0.2.0"
+version = "0.1.4"
 license = "MPL-2.0"
 authors = ["Jeremy Rubin <j@rubin.io>"]
 edition = "2018"
@@ -18,50 +18,45 @@ serde_derive = "1.0"
 clap = "=3.0.0-beta.2"
 base64 = "0.13.0"
 lazy_static = "1.4.0"
-bitcoincore-rpc-async = "4.0.1-alpha.1"
+bitcoincore-rpc-async = "3.0.1"
 tokio = { version = "1", features = ["full"] }
 directories = "3.0.1"
-rand="^0.6"
+wasmer= "1.0"
+wasmer-cache = "1.0"
 jsonschema-valid = "0.4.0"
-[dependencies.sapio-psbt]
-path = "../sapio-psbt"
-version = "0.1.0"
-
-[dependencies.wasmer]
-version = "2.2.1"
-
-[dependencies.wasmer-cache]
-version = "2.2.1"
-
 [dependencies.bitcoin]
 package = "sapio-bitcoin"
-version = "0.28.0"
+version = "^0.26.0"
 features = ['use-serde', 'rand', 'base64']
 [dependencies.miniscript]
 package = "sapio-miniscript"
-version = "^7.0.0"
+version = "^5.1.0"
 features = ['compiler', 'use-serde', 'rand', 'use-schemars', 'serde']

 [dependencies.sapio]
 path = "../sapio"
-version = "0.2.0"
+version = "0.1.0"

 [dependencies.sapio-base]
 path = "../sapio-base"
-version = "0.2.0"
+version = "0.1.0"

 [dependencies.ctv_emulators]
 path = "../ctv_emulators"
-version = "0.2.0"
+version = "0.1.0"
+
+
+[dependencies.sapio-front]
+path = "../sapio-front"
+version = "0.1.0"

 [dependencies.sapio-contrib]
 path = "../sapio-contrib"
-version = "0.2.0"
+version = "0.1.0"

 [dependencies.sapio-wasm-plugin]
 path = "../plugins"
-version = "0.2.0"
+version = "0.1.2"
 features = ["host"]
diff --git a/cli/src/config.rs b/cli/src/config.rs
index a3c10bc..9e1101a 100644
--- a/cli/src/config.rs
+++ b/cli/src/config.rs
@@ -4,35 +4,27 @@
 //  License, v. 2.0. If a copy of the MPL was not distributed with this
 //  file, You can obtain one at https://mozilla.org/MPL/2.0/.

-//! configuration file format / parsing for sapio command line interface
-
 use bitcoin::util::bip32::ExtendedPubKey;
-use bitcoincore_rpc_async as rpc;
-
 use directories::BaseDirs;
 use emulator_connect::connections::federated::FederatedEmulatorConnection;
 use emulator_connect::connections::hd::HDOracleEmulatorConnection;
 use emulator_connect::CTVEmulator;
-use schemars::JsonSchema;
 use serde::*;
-use std::collections::BTreeMap;
+use std::collections::HashMap;
 use std::convert::TryFrom;
 use std::net::ToSocketAddrs;
 use std::path::PathBuf;
 use std::str::FromStr;
 use std::sync::Arc;
 use tokio::sync::Mutex;
-use tokio::{io::BufReader, runtime::Handle};
 /// EmulatorConfig is used to determine how this sapio-cli instance should stub
 /// out CTV. Emulators are specified by EPK and interface address. Threshold
 /// should be <= emulators.len().
-#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
+#[derive(Serialize, Deserialize, Debug)]
 pub struct EmulatorConfig {
     /// if the emulator should be used or not. We tag explicitly for convenience
     /// in the config file format.
     pub enabled: bool,
-    /// list of emulators to use & how to contact them
-    #[schemars(with = "Vec<(String, String)>")]
     pub emulators: Vec<(ExtendedPubKey, String)>,
     /// threshold could be larger than u8, but that seems very unlikely/an error.
     pub threshold: u8,
@@ -45,23 +37,17 @@ impl EmulatorConfig {
     pub fn get_emulator(&self) -> Result<Arc<dyn CTVEmulator>, Box<dyn std::error::Error>> {
         if self.emulators.len() < self.threshold as usize {
             Err(String::from("Too High Thresh"))?;
-        } else if self.emulators.is_empty() {
-            Err(String::from("No Emulators Provided"))?;
+        } else if self.emulators.len() == 0 {
+            Err(String::from("Too High Thresh"))?;
         }
         let _n_emulators = self.emulators.len();
-        let rt = Handle::try_current()
-            .err()
-            .map(|_e| Arc::new(tokio::runtime::Runtime::new().unwrap()));
+        let rt = Arc::new(tokio::runtime::Runtime::new().unwrap());
         let secp = Arc::new(bitcoin::secp256k1::Secp256k1::new());
         let mut it =
             self.emulators
                 .iter()
                 .map(|(epk, host)| -> Result<_, Box<dyn std::error::Error>> {
-                    let handle = Handle::try_current().unwrap_or_else(|_e| {
-                        rt.as_ref().expect("must have own runtime").handle().clone()
-                    });
                     Ok(HDOracleEmulatorConnection {
-                        handle,
                         runtime: rt.clone(),
                         connection: Mutex::new(None),
                         reconnect: host.to_socket_addrs()?.next().unwrap(),
@@ -99,7 +85,7 @@ impl Into<PathBuf> for PathBufWrapped {
     }
 }
 /// Used to serailize/deserialize pathbufs for config
-mod pathbuf_serde {
+mod pathbuf {
     use serde::*;
     use std::path::PathBuf;
     pub fn serialize<S>(p: &PathBuf, s: S) -> Result<S::Ok, S::Error>
@@ -118,49 +104,36 @@ mod pathbuf_serde {
 /// Remote type Derivation for rpc::Auth
 /// TODO: Move to the RPC Library?
-#[derive(Serialize, Deserialize, Debug, Clone, JsonSchema)]
-#[serde(remote = "rpc::Auth")]
-pub enum Auth {
-    /// No Auth Used
+#[derive(Serialize, Deserialize, Debug)]
+#[serde(remote = "super::rpc::Auth")]
+enum Auth {
     None,
-    /// Username and Passowrd
     UserPass(String, String),
-    /// Cookie File
-    CookieFile(
-        #[serde(with = "pathbuf_serde")]
-        #[schemars(with = "String")]
-        PathBuf,
-    ),
+    CookieFile(#[serde(with = "pathbuf")] PathBuf),
 }
-
 /// Which Bitcoin Node should Sapio use
-#[derive(Serialize, Deserialize, Debug, Clone)]
+#[derive(Serialize, Deserialize, Debug)]
 pub struct Node {
-    /// the url to connect to
     pub url: String,
-    /// the auth to use
     #[serde(with = "Auth")]
-    pub auth: rpc::Auth,
+    pub auth: super::rpc::Auth,
 }

 /// A configuration for any network (regtest, main, signet, testnet)
 /// Only one config may set active = true at a time.
-#[derive(Serialize, Deserialize, Debug, Clone)]
+#[derive(Serialize, Deserialize, Debug)]
 pub struct NetworkConfig {
     /// if this is the active config
     pub active: bool,
-    /// the node to connect to
     pub api_node: Node,
-    /// the emulator to use, if any
     pub emulator_nodes: Option<EmulatorConfig>,
-    /// mapping of name:module hash for translation during compilation
     #[serde(skip_serializing_if = "Option::is_none", default)]
-    pub plugin_map: Option<BTreeMap<String, WasmerCacheHash>>,
+    pub plugin_map: Option<HashMap<String, WasmerCacheHash>>,
 }

 impl From<WasmerCacheHash> for [u8; 32] {
     fn from(x: WasmerCacheHash) -> Self {
-        x.0
+        x.0.into()
     }
 }

@@ -186,12 +159,10 @@ impl TryFrom<String> for WasmerCacheHash {
 /// This config has only the currently active network, the other configs get
 /// dropped during the ConfigVerifier::try_into.
-#[derive(Serialize, Deserialize, Debug, Clone)]
+#[derive(Serialize, Deserialize, Debug)]
 #[serde(try_from = "ConfigVerifier")]
 pub struct Config {
-    /// the currently active configuration
     pub active: NetworkConfig,
-    /// which network the configuration is for
     pub network: bitcoin::network::constants::Network,
 }

@@ -205,12 +176,12 @@ impl Config {
     /// happening on config.json. It is assumed that the user will ensure
     /// writes to config.json are safe.
     pub async fn setup(
-        custom_config: Option<&str>,
+        matches: &clap::ArgMatches,
         typ: &str,
         org: &str,
         proj: &str,
     ) -> Result<Config, Box<dyn std::error::Error>> {
-        if let Some(p) = custom_config {
+        if let Some(p) = matches.value_of("config") {
             Ok(serde_json::from_slice(&tokio::fs::read(p).await?[..])?)
         } else {
             let proj = directories::ProjectDirs::from(typ, org, proj)
@@ -222,7 +193,9 @@ impl Config {
             if let Ok(txt) = tokio::fs::read(&pb).await {
                 Ok(serde_json::from_slice(&txt[..])?)
             } else {
-                Err("Please Run the configure wizard command to make a config file")?
+                let cfg = ConfigVerifier::default();
+                tokio::fs::write(&pb, &serde_json::to_string_pretty(&cfg)?).await?;
+                Ok(Config::try_from(cfg)?)
             }
         }
     }
@@ -230,7 +203,7 @@ impl Config {

 /// This is a deserialization helper which checks the config file for well
 /// formedness before processing into an actual config.
-#[derive(Serialize, Deserialize, Debug, Clone)]
+#[derive(Serialize, Deserialize, Debug)]
 pub struct ConfigVerifier {
     main: Option<NetworkConfig>,
     testnet: Option<NetworkConfig>,
@@ -251,32 +224,6 @@ impl TryFrom<ConfigVerifier> for Config {
    }
 }

-impl From<Config> for ConfigVerifier {
-    fn from(c: Config) -> ConfigVerifier {
-        let mut res = ConfigVerifier {
-            main: None,
-            testnet: None,
-            signet: None,
-            regtest: None,
-        };
-        match c.network {
-            bitcoin::network::constants::Network::Regtest => {
-                res.regtest = Some(c.active);
-            }
-            bitcoin::network::constants::Network::Signet => {
-                res.signet = Some(c.active);
-            }
-            bitcoin::network::constants::Network::Testnet => {
-                res.testnet = Some(c.active);
-            }
-            bitcoin::network::constants::Network::Bitcoin => {
-                res.main = Some(c.active);
-            }
-        };
-        res
-    }
-}
-
 impl ConfigVerifier {
     /// Return the active network
     fn get_network(&self) -> Result<bitcoin::network::constants::Network, ConfigError> {
@@ -285,7 +232,9 @@ impl ConfigVerifier {
             3 => Ok(bitcoin::network::constants::Network::Bitcoin),
             11 => Ok(bitcoin::network::constants::Network::Testnet),
             7 => Ok(bitcoin::network::constants::Network::Regtest),
-            5 => Ok(bitcoin::network::constants::Network::Signet),
+            5 => {
+                todo!()
+            }
             _ => Err(ConfigError::TooManyActiveNetworks),
         }
     }
@@ -326,138 +275,11 @@ impl ConfigVerifier {
             _ => Err(ConfigError::TooManyActiveNetworks),
         }
     }
-
-    /// a setup wizard to generate a new config file
-    pub async fn wizard() -> Result<Self, Box<dyn std::error::Error>> {
-        use tokio::io::AsyncBufReadExt;
-
-        let stdin = tokio::io::stdin();
-        let reader = BufReader::new(stdin);
-        let mut b = BaseDirs::new()
-            .expect("Could Not Determine a Base Directory")
-            .home_dir()
-            .to_path_buf();
-        b.push(".bitcoin");
-        b.push("regtest");
-        b.push(".cookie");
-        let network;
-        let mut lines = reader.lines();
-        loop {
-            println!("Which Network? (main, reg, sig, test): ");
-            if let Some(line) = lines.next_line().await? {
-                network = match line.trim() {
-                    "main" => bitcoin::network::constants::Network::Bitcoin,
-                    "reg" => bitcoin::network::constants::Network::Regtest,
-                    "sig" => bitcoin::network::constants::Network::Signet,
-                    "test" => bitcoin::network::constants::Network::Testnet,
-                    _ => {
-                        println!("Not a valid option {:?}", line);
-                        continue;
-                    }
-                };
-                break;
-            }
-        }
-        let mut url: String;
-        loop {
-            println!("API Node URL (e.g., http://127.0.0.1:18443): ");
-            if let Some(line) = lines.next_line().await? {
-                url = line.trim().into();
-                if url.is_empty() {
-                    println!("Must enter a username");
-                } else {
-                    break;
-                }
-            }
-        }
-        let using_cookie;
-        loop {
-            println!("Auth Type (for cookie file, \"cookie\", for username/password \"basic\"): ");
-            if let Some(line) = lines.next_line().await? {
-                using_cookie = match line.trim() {
-                    "cookie" => true,
-                    "basic" => false,
-                    l => {
-                        println!("Invalid option {}, type cookie or basic:", l);
-                        continue;
-                    }
-                };
-                break;
-            }
-        }
-        let auth = if using_cookie {
-            let mut cookie: String;
-            loop {
-                println!("Cookie file location (e.g., {}): ", b.display());
-                if let Some(line) = lines.next_line().await? {
-                    cookie = line.trim().into();
-                    if cookie.is_empty() {
-                        println!("Must give a cookie file location.");
-                        continue;
-                    }
-                    break;
-                }
-            }
-            rpc::Auth::CookieFile(cookie.into())
-        } else {
-            let mut username: String;
-            loop {
-                println!("Username: ");
-                if let Some(line) = lines.next_line().await? {
-                    username = line.trim().into();
-                    if username.is_empty() {
-                        println!("Must enter a username");
-                    } else {
-                        break;
-                    }
-                }
-            }
-            let mut password: String;
-            loop {
-                println!("Password: ");
-                if let Some(line) = lines.next_line().await? {
-                    password = line.trim().into();
-                    if password.is_empty() {
-                        println!("Must enter a username");
-                    } else {
-                        break;
-                    }
-                }
-            }
-            rpc::Auth::UserPass(username, password)
-        };
-
-        println!("Configuration Complete!");
-        println!("To configure Emulators/ Plugin Maps please edit manually if desired.");
-        println!("Your Configuration:");
-
-        let active = NetworkConfig {
-            active: true,
-            api_node: Node{url, auth},
            emulator_nodes: Some(EmulatorConfig{
-                enabled: false,
-                threshold: 1u8,
-                emulators: vec![(ExtendedPubKey::from_str("tpubD6NzVbkrYhZ4Wf398td3H8YhWBsXx9Sxa4W3cQWkNW3N3DHSNB2qtPoUMXrA6JNaPxodQfRpoZNE5tGM9iZ4x$
-                    "example.please.change.this.before.using:8367".into())],
-            }),
-            plugin_map: None,
-        };
-        let cv: ConfigVerifier = Config { network, active }.into();
-        println!(
-            "{}",
-            serde_json::to_string_pretty(&serde_json::to_value(cv.clone())?)?
-        );
-
-        Ok(cv)
-    }
 }
-/// Errors that can arise when validating a configuration file
 #[derive(Debug)]
 pub enum ConfigError {
-    /// Only one network can be active at a time
     TooManyActiveNetworks,
-    /// One network must be active
     NoActiveConfig,
 }
 use std::fmt;
@@ -480,7 +302,7 @@ impl std::default::Default for ConfigVerifier {
         b.push(".cookie");
         let regtest = NetworkConfig {
             active: true,
-            api_node: Node{url: "http://127.0.0.1:18443".into(), auth: rpc::Auth::CookieFile(b)},
+            api_node: Node{url: "http://127.0.0.1:18443".into(), auth: super::rpc::Auth::CookieFile(b.into())},
             emulator_nodes: Some(EmulatorConfig{
                 enabled: true,
                 threshold: 1u8,
diff --git a/cli/src/contracts/request.rs b/cli/src/contracts/request.rs
deleted file mode 100644
index fb5a016..0000000
--- a/cli/src/contracts/request.rs
+++ /dev/null
@@ -1,371 +0,0 @@
-// Copyright Judica, Inc 2022
-//
-// This Source Code Form is subject to the terms of the Mozilla Public
-//  License, v. 2.0. If a copy of the MPL was not distributed with this
-//  file, You can obtain one at https://mozilla.org/MPL/2.0/.
-use bitcoin::{consensus::Decodable, psbt::PartiallySignedTransaction, OutPoint};
-use bitcoincore_rpc_async as rpc;
-use bitcoincore_rpc_async::RpcApi;
-use emulator_connect::{CTVAvailable, CTVEmulator};
-use sapio::{
-    contract::{
-        object::{LinkedPSBT, ObjectMetadata, Program, SapioStudioObject},
-        Compiled,
-    },
-    template::{OutputMeta, TemplateMetadata},
-    util::extended_address::ExtendedAddress,
-    Context,
-};
-use sapio_base::{
-    effects::{MapEffectDB, PathFragment},
-    serialization_helpers::SArc,
-    txindex::{TxIndex, TxIndexLogger},
-};
-use sapio_wasm_plugin::{
-    host::{plugin_handle::ModuleLocator, PluginHandle, WasmPluginHandle},
-    CreateArgs, API,
-};
-use schemars::JsonSchema;
-use serde::*;
-use serde_json::Value;
-use std::fmt::{Display, Formatter, Write};
-use std::{
-    collections::{BTreeMap, HashMap},
-    convert::TryInto,
-    error::Error,
-    path::PathBuf,
-    rc::Rc,
-    sync::Arc,
-};
-
-use crate::{config::EmulatorConfig, util::create_mock_output};
-
-#[derive(Serialize, Deserialize, JsonSchema)]
-pub struct Common {
-    pub path: PathBuf,
-    pub emulator: Option<EmulatorConfig>,
-    pub module_locator: Option<ModuleLocator>,
-    #[schemars(with = "String")]
-    pub net: bitcoin::Network,
-    pub plugin_map: Option<BTreeMap<Vec<u8>, [u8; 32]>>,
-}
-#[derive(Serialize, Deserialize, JsonSchema)]
-pub struct List;
-#[derive(Serialize, Deserialize, JsonSchema)]
-pub struct ListReturn {
-    items: BTreeMap<String, String>,
-}
-#[derive(Serialize, Deserialize, JsonSchema)]
-pub struct CallReturn {
-    result: Value,
-}
-#[derive(Serialize, Deserialize, JsonSchema)]
-pub struct Bind {
-    pub client_url: String,
-    #[serde(with = "crate::config::Auth")]
-    pub client_auth: rpc::Auth,
-    pub use_base64: bool,
-    pub use_mock: bool,
-    pub outpoint: Option<OutPoint>,
-    pub use_txn: Option<String>,
-    pub compiled: Compiled,
-}
-pub type BindReturn = Program;
-#[derive(Serialize, Deserialize, JsonSchema)]
-pub struct Api;
-#[derive(Serialize, Deserialize, JsonSchema)]
-pub struct ApiReturn {
-    api: API<CreateArgs<Value>, Value>,
-}
-#[derive(Serialize, Deserialize, JsonSchema)]
-pub struct Logo;
-#[derive(Serialize, Deserialize, JsonSchema)]
-pub struct LogoReturn {
-    logo: String,
-}
-#[derive(Serialize, Deserialize, JsonSchema)]
-pub struct Info;
-#[derive(Serialize, Deserialize, JsonSchema)]
-pub struct InfoReturn {
-    name: String,
-    description: String,
-}
-#[derive(Serialize, Deserialize, JsonSchema)]
-pub struct Load;
-#[derive(Serialize, Deserialize, JsonSchema)]
-pub struct LoadReturn {
-    key: String,
-}
-
-#[derive(Serialize, Deserialize, JsonSchema)]
-pub enum Command {
-    List(List),
-    Call(Call),
-    Bind(Bind),
-    Api(Api),
-    Logo(Logo),
-    Info(Info),
-    Load(Load),
-}
-#[derive(Serialize, Deserialize, JsonSchema)]
-pub enum CommandReturn {
-    List(ListReturn),
-    Call(CallReturn),
-    Bind(BindReturn),
-    Api(ApiReturn),
-    Logo(LogoReturn),
-    Info(InfoReturn),
-    Load(LoadReturn),
-}
-
-#[derive(Serialize, Deserialize, JsonSchema)]
-pub struct Request {
-    pub context: Common,
-    pub command: Command,
-}
-
-#[derive(Serialize, Deserialize, JsonSchema)]
-pub struct Response {
-    pub result: Result<CommandReturn, RequestError>,
-}
-
-#[derive(Serialize, Deserialize, JsonSchema, Debug)]
-pub struct RequestError(Value);
-
-impl Display for RequestError {
-    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
-        write!(f, "{:?}", self)
-    }
-}
-
-impl Error for RequestError {}
-
-type ResultT<T> = Result<T, Box<dyn Error>>;
-impl Request {
-    async fn get_emulator(&self) -> ResultT<Arc<dyn CTVEmulator>> {
-        let emulator: Arc<dyn CTVEmulator> = if let Some(emcfg) = &self.context.emulator {
-            if emcfg.enabled {
-                emcfg.get_emulator()?
-            } else {
-                Arc::new(CTVAvailable)
-            }
-        } else {
-            Arc::new(CTVAvailable)
-        };
-        Ok(emulator)
-    }
-    pub async fn handle(self) -> Response {
-        let v = self.handle_inner().await.map_err(|e| -> RequestError {
-            e.downcast::<RequestError>()
-                .map(|d| *d)
-                .unwrap_or_else(|e| RequestError(e.to_string().into()))
-        });
-        Response { result: v }
-    }
-    pub async fn handle_inner(self) -> ResultT<CommandReturn> {
-        let emulator = self.get_emulator().await?;
-        // create the future to get the sph,
-        // but do not await it since not all calls will use it.
-        let Request { context, command } = self;
-        let Common {
-            path,
-            module_locator,
-            net,
-            plugin_map,
-            ..
-        } = context;
-        let default_sph = || -> Result<_, &'static str> {
-            Ok(WasmPluginHandle::<Value>::new_async(
-                &path,
-                &emulator,
-                module_locator.ok_or("Expected to have exactly one of key or file")?,
-                net,
-                plugin_map.clone(),
-            ))
-        };

